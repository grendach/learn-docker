#+theme=black
#+closingMessage=Дякую!

Docker та його мережі
18 Серпня 2019

[[https://grendach.github.io/][Дмитро Грендач]]
Інженер в JustEat

Презентація тут: [[https://github.com/grendach/learn-docker.git]]


* Зміст
.image images/logo1.png 250 500
1. Що таке Docker ?
2. Як працює Docker
3. Цілі та значення мережі в Docker.
4. Модель контейнерної мережі (CNM)
5. Мережеві драйвери
6. Демонстрація
7. Питання/Відповіді


* 1. Що таке Docker ?
.image images/WhatIsDocker.png 350 500
*Docker* це платформа з відкритим кодом для *розробки*, *інтеграції* і *запуску* додатків. 
*Docker* дозволяє користувачу відокремити свої розроблені додатки та програми від серверної інфраструктури за допомогою КОНТЕЙНЕРІВ.
Це значно пришвидшує і cпрощує механізм розробки програм та додатків.


* 2. Як працює Docker
Перед розглядом мережевих компонентів, давайте розглянемо в загальному як працює *Docker*.

.image images/DockerNetworking.png 250 550

*Мережа* в Docker забезпечує можливість спілкування між собою і з "зовнішнім світом" всіх контейнерів в залежності від потреб користувача.


* 3. Цілі та значення мережі в Docker.
.image images/Goals.png 400 800
Для виконання своїх завдань та щоб бути доступним для інших аплікацій Docker використовує так звану 
Модель Контейнерної Мережі (*Container* *Network* *Model*) та мережеві драйвери.


* 4. Модель Контейнерної Мережі
.image images/cnm.png 400 800
*Модель* *Контейнерної* *Мережі* *(CNM)* стандартизує поняття і механізми які потрібні для поєднання контейнерів та управління ними з використанням мережевих драйверів. 


* 
- *Мережевий* *Контроллер*: Забезбечує "точку входу" і дає доступ до простого прикладного програмного інтерфейсу (API) для Docker двигуна, для уплавління мережею.
- *Драйвер*: Відповідальний за мережу і за її управління. Призначений для виконнання різних завдань які стоять перед користувачем/розробником.
- *Мережа*: Зaбезпечує поєднання між групою кінцевий точок що знаходяться в одній мережі і ізоловані від інших контейнерів. Це дає змогу оновити відповідний драйвер під час створення чи оновлення мережі.
- *Кінцева* *точка* (Endpoint): забезпечує з'єднання для служб, з якими контейнер може взаємодіяти в мережі, з іншими послугами, що надаються іншими контейнерами в мережі. Кінцевими точками є: (IP-адреса, MAC-адреса, маршрути, DNS).
- *Пісочниця* (Sandbox): Створюється кожного разу коли користувач створює кінцеву точку в мережі.


* 5. Мережеві драйвери.
Docker використовує 5 видів мережевих драйверів: 
- *Bridge* (Міст)
- *Host* (Хост)
- *None* (Ніякий)
- *Overlay* (Накладення)
- *Macvlan* 
Розглянемо більш детально кожен з них ...

* Міст (Bridge)
.image images/bridge.png 300 300
- За замовчуванням Docker створює приватнy внутрішню мережу на хості.
- Всі контейнери отримують внутрішні IP-адерси і можуть спілкуватися один з одним за допомогою цих адрес.
- Як правило використовується коли ваш додаток запущений в окремому контейнері і він повинен мати доступ до інших контейнерів.

* Хост
.image images/host.png 300 300
- Цей драйвер усуває ізоляцію між контейнером і сервером(хостом) на якому цей контейнер запущений.
- Контейнер використовує безпосередньо мережу сервера.
- *НЕМОЖЛИВО* запустити одночасно декілька контейнерів наприклад з WEB-додатками з такою самою комбінацією  *<IP-адреса:порт>*

* Ніякий (None)
.image images/None.png 300 300
- Контейнер не прикріплений до жодної мережі.
- Контейнери не мають доступу до зовнішньої мережі чи до інших контейнерів.
- Даний драйвер повністю вимикає мережеві функції в контейнері. В контейнері доступний тільки *loopback* *інтерфейс*.

* Накладання (Overlay)
.image images/overlay.png 300 600
- Створює внутрішню приватну мережу, яка охоплює всі вузли, що беруть участь в кластері.
- Дозволяє здійснювати зв’язок між службою та окремим контейнером або між двома окремими контейнерами на різних Docker демонах.

* Macvlan
.image images/macVlan.png 300 500
- Дозволяє призначити MAC-адресу контейнеру, відображаючи його як фізичний пристрій у мережі сервера де запущений даний контейнер.
- Демон Docker спрямовує трафік до контейнерів за їх MAC-адресами.
- Кращий вибір бути безпосередньо підключеним до фізичної мережі, а не здійснювати маршрутизацію через мережевий стек хоста Docker.

* 6. Демо

* 7 Питання і ... можливо відповіді :)